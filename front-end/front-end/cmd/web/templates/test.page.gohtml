{{template "base" .}}

{{define "content" }}
    <div class="container">
        <div class="row">
            <div class="col">
                <h1 class="mt-5">Test microservices</h1>
                <hr>
                <a id="brokerBtn" class="btn btn-outline-success" href="javascript:void(0);">Test Broker</a>
                <a id="authBtn" class="btn btn-outline-success" href="javascript:void(0);">Test Auth</a>
                <a id="loggerBtn" class="btn btn-outline-success" href="javascript:void(0);">Test Logger</a>
                <a id="paymentBtn" class="btn btn-outline-success" href="javascript:void(0);">Test Payment</a>

                <div id="output" class="mt-5" style="outline: 1px solid silver; padding: 2em;">
                    <span class="text-muted">Output shows here...</span>
                </div>
            </div>
        </div>
        <form id="payment-form" class="hidden pay-hidden" style="display: none;">
            <div id="payment-element">
                
            </div>
            <button id="submit">
                <div class="spinner hidden" id="spinner"></div>
                <span id="button-text" class="btn btn-outline-success">Pay now</span>
            </button>
            <div id="payment-message" class="hidden"></div>
        </form>
        <div class="row">
            <div class="col">
                <h4 class="mt-5">Sent</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="payload"><span class="text-muted">Nothing sent yet...</span></pre>
                </div>
            </div>
            <div class="col">
                <h4 class="mt-5">Received</h4>
                <div class="mt-1" style="outline: 1px solid silver; padding: 2em;">
                    <pre id="received"><span class="text-muted">Nothing received yet...</span></pre>
                </div>
            </div>
        </div>
    </div>
{{end}}

{{define "js"}}
    <script>
        let brokerBtn = document.getElementById("brokerBtn");
        let authBtn = document.getElementById("authBtn");
        let loggerBtn = document.getElementById("loggerBtn");
        let output = document.getElementById("output");
        let sent = document.getElementById("payload");
        let received = document.getElementById("received");

        loggerBtn.addEventListener('click', () => {
            const payload = {
                action: 'logger',
                logger: {
                    email: 'emiliocliff@gmail.com',
                    data: 'test logger',
                }
            };

            let headers = new Headers();
            headers.append('Content-Type', 'application/json');

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers,
            };

            console.log(body);

            fetch("http:\/\/localhost:8080/handler", body)
            .then(response => response.json())
            .then((data) => {
                sent.innerHTML = JSON.stringify(payload, null, 4);
                received.innerHTML = JSON.stringify(data, null, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error: </strong> ${data.message}<br><strong>Message: </strong> ${data.data}`
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong> ${data.message}` ;
                };  
            })
            .catch((error) => {
                output.innerHTML =  "<br><br>Error:" + error;
            })
        });

        authBtn.addEventListener('click', () => {
            const payload = {
                action: 'auth',
                auth: {
                    email: 'admin@example.com',
                    password: 'verysecret',
                }
            }

            let headers = new Headers();
            headers.append('Content-Type', 'application/json');

            const body = {
                method: "POST",
                body: JSON.stringify(payload),
                headers: headers
            }

            fetch("http:\/\/localhost:8080/handler", body)
            .then((response) => response.json())
            .then((data) => {
                sent.innerHTML = JSON.stringify(payload, null, 4);
                received.innerHTML = JSON.stringify(data, null, 4);
                if (data.error) {
                    output.innerHTML += `<br><strong>Error: </strong> ${data.message}<br><strong>Message: </strong> ${data.data}`
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong> ${data.message}` ;
                };  
            })
            .catch((error) => {
                output.innerHTML =  "<br><br>Error:" + error;
            })
        });

        brokerBtn.addEventListener('click', () => {
            const body = {
                method: 'POST',
            }

            fetch("http:\/\/localhost:8080/", body)
            .then((response) => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then((data) => {
                sent.innerHTML = "empty post request";
                received.innerHTML = JSON.stringify(data, null, 4);
                if (data.error) {
                    console.log(data.message);
                } else {
                    output.innerHTML += `<br><strong>Response from broker service</strong> ${data.message}` ;
                };
            })

            .catch((error) => {
                output.innerHTML += "<br><br>Error:" + error;
            });
        });

        let stripe;
        let paymentBtn = document.getElementById("paymentBtn");
        paymentBtn.addEventListener('click', () => {
            document.getElementById("payment-form").classList.remove("hidden");
            fetch("http:\/\/localhost:8080/handler", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                    action: "payment",
                    payment: {
                        publish: "request publishable-key",
                    }
                }),
            })
            .then(response => response.json())
            .then((data) => {
                stripe = Stripe(data.publishable_key)
                initialize();

                console.log("here")
                document.querySelector(".pay-hidden").style.display = "block";
                document
                .querySelector("#payment-form")
                .addEventListener("submit", handleSubmit);
                
            })
            .catch((error) => {
                output.innerHTML =  "<br><br>Error:" + error;
            })
        })

        let elements;

        // Fetches a payment intent and captures the client secret
        async function initialize() {
        const response = await fetch("http:\/\/localhost:8080/handler", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ 
                action: "payment",
                payment: {
                    amount: 500,
                }
            }),
        });
        const { client_secret } = await response.json();
        const clientSecret = client_secret
        const appearance = {
            theme: 'stripe',
        };
        elements = stripe.elements({ appearance, clientSecret });

        const paymentElementOptions = {
            layout: "tabs",
        };

        const paymentElement = elements.create("payment", paymentElementOptions);
        paymentElement.mount("#payment-element");
        }

        async function handleSubmit(e) {
        e.preventDefault();

        setLoading(true);

        const { error } = await stripe.confirmPayment({
            elements,
            confirmParams: {
            return_url: "http://localhost:8082/checkout",
            },
        });

        // This point will only be reached if there is an immediate error when
        // confirming the payment. Otherwise, your customer will be redirected to
        // your `return_url`. For some payment methods like iDEAL, your customer will
        // be redirected to an intermediate site first to authorize the payment, then
        // redirected to the `return_url`.
        if (error.type === "card_error" || error.type === "validation_error") {
            showMessage(error.message);
        } else {
            showMessage("An unexpected error occurred.");
        }

        setLoading(false);

        checkStatus();
        }

        // Fetches the payment intent status after payment submission
        async function checkStatus() {
        const clientSecret = new URLSearchParams(window.location.search).get(
            "payment_intent_clientSecret"
        );

        if (!clientSecret) {
            return;
        }

        const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);
        console.log(paymentIntent)


        switch (paymentIntent.status) {
            case "succeeded":
            showMessage("Payment succeeded!");
            break;
            case "processing":
            showMessage("Your payment is processing.");
            break;
            case "requires_payment_method":
            showMessage("Your payment was not successful, please try again.");
            break;
            default:
            showMessage("Something went wrong.");
            break;
        }
        }
        // ------- UI helpers -------

        function showMessage(messageText) {
        const messageContainer = document.querySelector("#payment-message");

        messageContainer.classList.remove("hidden");
        messageContainer.textContent = messageText;

        setTimeout(function () {
            messageContainer.classList.add("hidden");
            messageContainer.textContent = "";
        }, 4000);
        }

        // Show a spinner on payment submission
        function setLoading(isLoading) {
        if (isLoading) {
            // Disable the button and show a spinner
            document.querySelector("#submit").disabled = true;
            document.querySelector("#spinner").classList.remove("hidden");
            document.querySelector("#button-text").classList.add("hidden");
        } else {
            document.querySelector("#submit").disabled = false;
            document.querySelector("#spinner").classList.add("hidden");
            document.querySelector("#button-text").classList.remove("hidden");
        }
        }
    </script>

{{end}}
