// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createLog = `-- name: CreateLog :one
INSERT INTO logs (
    email, data, user_ip, user_agent
) VALUES (
    $1, $2, $3, $4
)
RETURNING id, email, data, user_ip, user_agent, logged_at
`

type CreateLogParams struct {
	Email     string
	Data      string
	UserIp    string
	UserAgent string
}

func (q *Queries) CreateLog(ctx context.Context, arg CreateLogParams) (Log, error) {
	row := q.db.QueryRow(ctx, createLog,
		arg.Email,
		arg.Data,
		arg.UserIp,
		arg.UserAgent,
	)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Data,
		&i.UserIp,
		&i.UserAgent,
		&i.LoggedAt,
	)
	return i, err
}

const getLogByEmail = `-- name: GetLogByEmail :many
SELECT id, email, data, user_ip, user_agent, logged_at FROM logs
WHERE email = $1
ORDER BY logged_at DESC
`

func (q *Queries) GetLogByEmail(ctx context.Context, email string) ([]Log, error) {
	rows, err := q.db.Query(ctx, getLogByEmail, email)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Data,
			&i.UserIp,
			&i.UserAgent,
			&i.LoggedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLogByID = `-- name: GetLogByID :one
SELECT id, email, data, user_ip, user_agent, logged_at FROM logs
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetLogByID(ctx context.Context, id int64) (Log, error) {
	row := q.db.QueryRow(ctx, getLogByID, id)
	var i Log
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Data,
		&i.UserIp,
		&i.UserAgent,
		&i.LoggedAt,
	)
	return i, err
}

const getLogByIp = `-- name: GetLogByIp :many
SELECT id, email, data, user_ip, user_agent, logged_at FROM logs
WHERE user_ip = $1
ORDER BY logged_at DESC
`

func (q *Queries) GetLogByIp(ctx context.Context, userIp string) ([]Log, error) {
	rows, err := q.db.Query(ctx, getLogByIp, userIp)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Data,
			&i.UserIp,
			&i.UserAgent,
			&i.LoggedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listLogs = `-- name: ListLogs :many
SELECT id, email, data, user_ip, user_agent, logged_at FROM logs
ORDER BY logged_at DESC
`

func (q *Queries) ListLogs(ctx context.Context) ([]Log, error) {
	rows, err := q.db.Query(ctx, listLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Log
	for rows.Next() {
		var i Log
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.Data,
			&i.UserIp,
			&i.UserAgent,
			&i.LoggedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
